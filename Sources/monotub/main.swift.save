import NIO

private final class MonotubHandler: ChannelInboundHandler
{
  public typealias InboundIn = ByteBuffer
  public typealias OutboundOut = ByteBuffer

  public func channelActive(context: ChannelHandlerContext)
  {
    print("active")
  }

  public func channelRead(context: ChannelHandlerContext, data: NIOAny)
  {
    print("read")

    print(data)
  }

  public func channelReadComplete(context: ChannelHandlerContext)
  {
    print("readComplete")
  }

  public func errorCaught(context: ChannelHandlerContext, error: Error)
  {
        print("error: ", error)
        context.close(promise: nil)
  }
}

func main(host: String, port: Int)
{
  let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
  let bootstrap = DatagramBootstrap(group: group)
    .channelOption(ChannelOptions.socketOption(.so_reuseaddr), value: 1)
    .channelInitializer
    {
      channel in

      channel.pipeline.addHandler(MonotubHandler())
    }

//defer
//{
//  try! group.syncShutdownGracefully()
//}

  do
  {
    let channel = try
    {
      () -> Channel in

      return try bootstrap.bind(host: host, port: port).wait()
    }()

    print("Server started and listening on \(channel.localAddress!)")
    try channel.closeFuture.wait()
  }
  catch
  {
    print("Error bootstrapping")
  }

  print("Done.")
}

let host = "127.0.0.1"
let port = 5050

main(host: host, port: port)
